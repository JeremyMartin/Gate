buildscript {

	ext {
		dependencyManagementPluginVersion = "1.0.11.RELEASE"
		springBootGradlePluginVersion = "2.5.5"
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootGradlePluginVersion}")
	}

}

apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"

group "com.jmc.commons"
version "0.0.1"

sourceCompatibility = 16

repositories {
	mavenCentral()
}

ext {
    commonsCollections4Version = "4.4"
	commonsIoVersion = "2.11.0"
    commonsLang3Version = "3.12.0"
	commonsTextVersion = "1.9"
	guavaVersion = "31.0.1-jre"
	junitVintageEngineVersion = "5.8.1"
	powermockApiMockitoVersion = "2.0.9"
	powermockModuleJunit4RuleAgentVersion = "2.0.9"
	powermockModuleJunit4Version = "2.0.9"
}

dependencies {
	implementation("com.google.guava:guava:${guavaVersion}")
	implementation("commons-io:commons-io:${commonsIoVersion}")
    implementation("org.apache.commons:commons-collections4:${commonsCollections4Version}")
	implementation("org.apache.commons:commons-text:${commonsTextVersion}")
	implementation("org.springframework.boot:spring-boot-starter-validation")

	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVintageEngineVersion}")
	testImplementation("org.powermock:powermock-api-mockito2:${powermockApiMockitoVersion}")
	testImplementation("org.powermock:powermock-module-junit4-rule-agent:${powermockModuleJunit4RuleAgentVersion}")
	testImplementation("org.powermock:powermock-module-junit4:${powermockModuleJunit4Version}")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
}

test {
	jvmArgs = [
		"--add-opens", "java.base/java.io=ALL-UNNAMED",
		"--add-opens", "java.base/java.time=ALL-UNNAMED"
	]
	useJUnitPlatform()
}

task("deleteTestConfiguration", type: Delete) {
	description("Delete test properties and xml files")
	doFirst {
		println("\tStart delete test configuration for ${project.name}")
		println("\tDeleting test configuration for ${project.name}")
		def dirName = "${projectDir}/src/test/resources" as Object
		file(dirName).list().each { f ->
			delete "${dirName}/${f}"
		}
		delete(files("${projectDir}/out"))
		println("\tEnd delete test configuration for ${project.name}")
	}
}

task("copyTestConfiguration", dependsOn: deleteTestConfiguration) {
	description("Copy test properties and xml files")
	doFirst {
		println("\tStart copy test configuration for ${project.name}")
		println("\tCopying test configuration for ${project.name}")
		copy {
			from "../configuration/environment/test"
			into "${project.projectDir}/src/test/resources"
		}
		println("\tEnd copy test configuration for ${project.name}")
	}
}

clean {
	dependsOn("deleteTestConfiguration")
}

compileTestJava {
	dependsOn("copyTestConfiguration")
}